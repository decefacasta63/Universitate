#include <iostream>
using namespace std;

class matrice
{
    private:

        int linii;
        int coloane;

        double **data = NULL;

        bool operatie_incompatibila;

    public:

        matrice(double, int, int);  //constructor initialzare
        matrice(matrice&);          //constructor copiere
        ~matrice();

        void citire(istream &in);   //metoda citire
        void afisare(ostream &out); //metoda afisare

        matrice& operator=(matrice &M);                     //supraincarcare operator atribuire
        friend matrice& operator+(matrice& M, matrice& N);  //supraincarcare operator +
        friend matrice& operator-(matrice& M, matrice& N);  //supraincarcare operator -
        friend matrice& operator*(matrice& M, matrice& N);  //supraincarcare operator *
        friend matrice& operator*(int n, matrice& M);
        friend matrice& operator*(matrice& M, int n);
        friend bool operator==(matrice& M, matrice& N);     //supraincarcare operator ==
        friend istream& operator>>(istream &in, matrice& M);
        friend ostream& operator<<(ostream &out, matrice& M);

        void reactualizare(double, int, int); //metoda reactualizare matrice

        friend int nrlinii(matrice& M);       //functii friend
        friend int nrcoloane(matrice& M);
        friend int nrelemente(matrice& M);

        friend matrice& rezolvare(matrice&, matrice&); //rezolvare ecuatie A*X + B = O
        friend double determinant(matrice& M);
        friend double delta(matrice& M, int n);

        int get_linii(){return linii;}
        int get_coloane(){return coloane;}

};

matrice::matrice(double nr = 0, int linii = 1, int coloane = 1)
{
    this->linii = linii;
    this->coloane = coloane;

    this->operatie_incompatibila = false;

    this->data = new double*[linii];
    for(int i = 0; i < linii; i++)
        data[i] = new double[coloane];

    for(int i = 0; i < linii; i++)
    for(int j = 0; j < coloane; j++)
        data[i][j] = nr;

}

matrice::matrice(matrice& M)
{
    this->linii = M.linii;
    this->coloane = M.coloane;

    this->operatie_incompatibila = M.operatie_incompatibila;

    this->data = new double*[linii];
    for(int i = 0; i < linii; i++)
        data[i] = new double[coloane];

    for(int i = 0; i < linii; i++)
    for(int j = 0; j < coloane; j++)
        data[i][j] = M.data[i][j];
}

matrice::~matrice()
{
    for(int i = 0; i < this->linii; i++)
        delete[] data[i];
    delete[] data;
}

int nrlinii(matrice& M){return M.linii;}
int nrcoloane(matrice& M){return M.coloane;}
int nrelemente(matrice& M){return M.linii * M.coloane;}

void matrice::reactualizare(double nr, int linii, int coloane)
{
    for(int i = 0; i < this->linii; i++)
        delete[] data[i];
    delete[] data;

    this->linii = linii;
    this->coloane = coloane;

    this->data = new double*[linii];
    for(int i = 0; i < linii; i++)
        data[i] = new double[coloane];

    for(int i = 0; i < linii; i++)
    for(int j = 0; j < coloane; j++)
        data[i][j] = nr;

}

void matrice::citire(istream &in)
{
    for(int i = 0; i < linii; i++)
        delete[] data[i];
    delete[] data;

    cout << "Nr. de linii: ";
    in >> linii;
    cout << "Nr. de coloane: ";
    in >> coloane;
    cout << "Introduceti matricea: ";

    this->data = new double*[linii];
    for(int i = 0; i < linii; i++)
        data[i] = new double[coloane];

    for(int i = 0; i < linii; i++)
    for(int j = 0; j < coloane; j++)
        {
            double tmp;
            in >> tmp;
            data[i][j] = tmp;
        }
}

istream& operator>>(istream &in, matrice& M)
{
    M.citire(in);
    return in;
}

void matrice::afisare(ostream &out)
{
    out << "Nr. de linii: " << linii << endl;
    out << "Nr. de coloane: " << coloane << endl;
    out << "Matricea este:" << endl;

    for(int i = 0; i < linii; i++)
    {
        for(int j = 0; j < coloane; j++)
            out << data[i][j] << " ";
        out << endl;
    }
    out << endl;
}

ostream& operator<<(ostream &out, matrice& M)
{
    M.afisare(out);
    return out;
}

inline matrice& matrice::operator=(matrice &M)
{
    if (M.operatie_incompatibila == false)
    {
        this->linii = M.linii;
        this->coloane = M.coloane;

        this->data = new double*[linii];
        for(int i = 0; i < M.linii; i++)
            this->data[i] = new double[coloane];

        for(int i = 0; i < M.linii; i++)
        for(int j = 0; j < M.coloane; j++)
            data[i][j] = M.data[i][j];
    }

    return *this;
}

inline matrice& operator+(matrice& M, matrice& N)
{
    matrice *S = new matrice;

    if(M.linii == N.linii && M.coloane == N.coloane)
    {
        S->linii = M.linii;
        S->coloane = M.coloane;

        S->data = new double*[S->linii];
        for(int i = 0; i < S->linii; i++)
            S->data[i] = new double[S->coloane];

        for(int i = 0; i < S->linii; i++)
        for(int j = 0; j < S->coloane; j++)
            S->data[i][j] = M.data[i][j] + N.data[i][j];
    }
    else
    {
        cout << "Matricile sunt incompatibile." << endl;
        S->operatie_incompatibila = true;
    }

    return *S;

}

inline matrice& operator-(matrice& M, matrice& N)
{
    matrice *S = new matrice;

    if(M.linii == N.linii && M.coloane == N.coloane)
    {
        S->linii = M.linii;
        S->coloane = M.coloane;

        S->data = new double*[S->linii];
        for(int i = 0; i < S->linii; i++)
            S->data[i] = new double[S->coloane];

        for(int i = 0; i < S->linii; i++)
        for(int j = 0; j < S->coloane; j++)
            S->data[i][j] = M.data[i][j] - N.data[i][j];
    }
    else
    {
        cout << "Matricile sunt incompatibile." << endl;
        S->operatie_incompatibila = true;
    }

    return *S;

}

inline bool operator==(matrice& M, matrice& N)
{
    if (M.linii == N.linii && M.coloane == N.coloane)
    {
        for(int i = 0; i < M.linii; i++)
        for(int j = 0; j < M.coloane; j++)
            if(M.data[i][j] != N.data[i][j]) return false;

        return true;
    }
    return false;
}

inline matrice& operator*(int n, matrice& M)
{
    matrice *R = new matrice;

    R->linii = M.linii;
    R->coloane = M.coloane;

    R->data = new double*[M.linii];
    for(int i = 0; i < M.linii; i++)
        R->data[i] = new double[M.coloane];

    for(int i = 0; i < M.linii; i++)
    for(int j = 0; j < M.coloane; j++)
        R->data[i][j] = n * M.data[i][j];

    return *R;
}

inline matrice& operator*(matrice& M, int n)
{
    matrice *R = new matrice;

    R->linii = M.linii;
    R->coloane = M.coloane;

    R->data = new double*[M.linii];
    for(int i = 0; i < M.linii; i++)
        R->data[i] = new double[M.coloane];

    for(int i = 0; i < M.linii; i++)
    for(int j = 0; j < M.coloane; j++)
        R->data[i][j] = n * M.data[i][j];

    return *R;
}

inline matrice& operator*(matrice& M, matrice& N)
{
    matrice *R = new matrice;

    if (M.linii == N.coloane)
    {
        R->linii = M.linii;
        R->coloane = N.coloane;

        R->data = new double*[M.linii];
        for(int i = 0; i < M.linii; i++)
            R->data[i] = new double[N.coloane];

        for(int i = 0; i < M.linii; i++)
        for(int j = 0; j < N.coloane; j++)
            R->data[i][j] = 0;


        for(int i = 0; i < M.linii; i++)
        for(int j = 0; j < N.coloane; j++)
        for(int k = 0; k < M.coloane; k++)
            R->data[i][j] = R->data[i][j] + M.data[i][k] * N.data[k][j];
    }
    else
    {
        cout << "Matricile sunt incompatibile." << endl;
        R->operatie_incompatibila = true;
    }

    return *R;
}


//to do
inline matrice& substitutieAscendenta(matrice L);


inline double delta(matrice& M, int n)
{
    double det = 0;
    matrice N(0, n-1, n-1);

    if (n == 1)
        return M.data[0][0];

    if (n == 2)
        return ((M.data[0][0] * M.data[1][1]) - (M.data[1][0] * M.data[0][1]));

   else {
      for (int x = 0; x < n; x++) {
            int subi = 0;
            for (int i = 1; i < n; i++) {
               int subj = 0;
               for (int j = 0; j < n; j++) {
                  if (j == x)
                  continue;
                  N.data[subi][subj] = M.data[i][j];
                  subj++;
               }
               subi++;
            }
            det = det + ( (-1 + 2 * ((x+1)%2)) * M.data[0][x] * delta(N, n - 1 )); // (-1 + 2 * ((x+1)%2)) == pow(-1, x)
      }
   }

   return det;
}

double determinant(matrice& M)
{
    if (M.linii == M.coloane)
        return delta(M, M.linii);
    else
        cout << "Matricea nu este patratica." << endl;
}

matrice& rezolvare(matrice& A, matrice& B)
{
    matrice *X = new matrice;

    if (determinant(A))
    {
        cout << "merge";
    }
    else
    {
        cout << "Sistemul este incompatibil." << endl;
        X->operatie_incompatibila = true;
    }
}

int main()
{
    matrice M(3,1,1);
    matrice N(3,2,3);

    //cin >> M;

    //cout << M;

    rezolvare(M, N);

    return 0;


}
